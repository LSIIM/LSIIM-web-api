// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(256)
  email     String   @unique @db.VarChar(256)
  password  String   @db.VarChar(256)
  cpf       String   @db.VarChar(14)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]

  @@map("usuarios")
}

model Token {
  id          String    @id @default(uuid())
  token       String
  type        TokenType
  expires     DateTime
  createdAt   DateTime  @default(now())
  blacklisted Boolean
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  @@map("tokens")
}

model BabyInfo {
  id             Int      @id @default(autoincrement())
  name           String
  birthDate      DateTime
  isPremature    Boolean
  gestationalAge Int
  atipicidade    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  recordings Recording[]
  @@map("baby_info")
}

model CamInfo {
  id                 Int               @id @default(autoincrement())
  model              String
  isInfraRed         Boolean
  framerate          Float?
  projectVideoTypeId Int?
  projectVideoType   ProjectVideoType? @relation(fields: [projectVideoTypeId], references: [id])

  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  recordVideoTypes RecordVideoTypeCamUsed[]
  recordings       Recording[]

  @@map("cam_info")

}

model MovesInfo {
  id          Int      @id @default(autoincrement())
  description String
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  recordings Recording[]

  @@map("moves_info")
}

model Recording {
  id            Int        @id @default(autoincrement())
  ignore        Boolean
  observation   String?
  babyId        Int
  babyInfo      BabyInfo   @relation(fields: [babyId], references: [id])
  recordingDate DateTime
  moveId        Int?
  moveInfo      MovesInfo? @relation(fields: [moveId], references: [id])
  movAux        Boolean
  projectId     Int
  project       Project    @relation(fields: [projectId], references: [id])
  camInfoId     Int?
  camInfo       CamInfo?   @relation(fields: [camInfoId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  recordVideoTypes RecordVideoTypeCamUsed[]
  annotations      Annotation[]
  //processed        Processing[]
  results          Result[]

  @@map("recordings")
}

model Project {
  id          Int      @id @default(autoincrement())
  projectName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectsVideoTypes ProjectVideoType[]
  movesInfo          MovesInfo[]
  recordings         Recording[]

  @@map("projects")
}

model ProjectVideoType {
  id              Int                      @id @default(autoincrement())
  isMain          Boolean
  typeName        String
  projectId       Int
  project         Project                  @relation(fields: [projectId], references: [id])
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  camsInfo        CamInfo[]
  recordVideoType RecordVideoTypeCamUsed[]
  annotations     Annotation[]
  results         Result[]

  @@map("project_video_type")
}

model RecordVideoTypeCamUsed {
  id                 Int              @id @default(autoincrement())
  camIdUsed          Int
  camInfo            CamInfo          @relation(fields: [camIdUsed], references: [id])
  recordingId        Int
  recording          Recording        @relation(fields: [recordingId], references: [id])
  projectVideoTypeId Int
  projectVideoType   ProjectVideoType @relation(fields: [projectVideoTypeId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@map("record_video_type_cam_used")
}

model AnnotationType {
  id         Int     @id @default(autoincrement())
  name       String
  descricao  String
  isTemporal Boolean

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  annotations Annotation[]

  @@map("annotation_type")
}

model Annotation {
  id                 Int              @id @default(autoincrement())
  recordingId        Int
  recording          Recording        @relation(fields: [recordingId], references: [id])
  projectVideoTypeId Int
  projectVideoType   ProjectVideoType @relation(fields: [projectVideoTypeId], references: [id])
  annotationTypeId   Int
  annotationType     AnnotationType   @relation(fields: [annotationTypeId], references: [id])
  frames             Int[]
  comment            String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@map("annotations")
}

// model ProcessingType {
//   id          Int          @id @default(autoincrement())
//   name        String
//   description String?
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
//   processings Processing[]

//   @@map("processing_type")
// }

// model Processing {
//   id               Int            @id @default(autoincrement())
//   videoUrl         String
//   processingTypeId Int
//   processingType   ProcessingType @relation(fields: [processingTypeId], references: [id])
//   status           String
//   recordingId      Int
//   recording        Recording      @relation(fields: [recordingId], references: [id])
//   createdAt        DateTime       @default(now())
//   updatedAt        DateTime       @updatedAt
//   resultUrl        String?

//   @@map("processings")
// }

model ResultTypeOptions {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  resultTypeId Int
  resultType   ResultType   @relation(fields: [resultTypeId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  results     Result[]

  @@map("result_type_options")
}

model ResultType {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  resultTypes ResultTypeOptions[]
  results     Result[]

  @@map("result_type")
}

model Result {
  id          Int      @id @default(autoincrement())
  scalarResult Float
  resultTypeId Int
  resultType   ResultType @relation(fields: [resultTypeId], references: [id])
  resultTypeOptionId Int
  resultTypeOption   ResultTypeOptions @relation(fields: [resultTypeOptionId], references: [id])
  projectVideoTypeId Int
  projectVideoType   ProjectVideoType @relation(fields: [projectVideoTypeId], references: [id])
  recordingId Int
  recording   Recording @relation(fields: [recordingId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("results")

}

enum Role {
  ADMIN
  USER
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
